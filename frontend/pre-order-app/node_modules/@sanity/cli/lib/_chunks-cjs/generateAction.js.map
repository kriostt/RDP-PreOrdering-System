{"version":3,"file":"generateAction.js","sources":["../../src/actions/typegen/generate.telemetry.ts","../../src/actions/typegen/generateAction.ts"],"sourcesContent":["import {defineTrace} from '@sanity/telemetry'\n\ninterface TypesGeneratedTraceAttrubutes {\n  outputSize: number\n  queriesCount: number\n  schemaTypesCount: number\n  queryFilesCount: number\n  filesWithErrors: number\n  typeNodesGenerated: number\n  unknownTypeNodesGenerated: number\n  unknownTypeNodesRatio: number\n}\n\nexport const TypesGeneratedTrace = defineTrace<TypesGeneratedTraceAttrubutes>({\n  name: 'Types Generated',\n  version: 0,\n  description: 'Trace emitted when generating TypeScript types for queries',\n})\n","import {constants, open} from 'node:fs/promises'\nimport {join} from 'node:path'\n\nimport {readConfig} from '@sanity/codegen'\nimport {Worker} from 'worker_threads'\n\nimport {type CliCommandArguments, type CliCommandContext} from '../../types'\nimport {getCliWorkerPath} from '../../util/cliWorker'\nimport {\n  type TypegenGenerateTypesWorkerData,\n  type TypegenGenerateTypesWorkerMessage,\n} from '../../workers/typegenGenerate'\nimport {TypesGeneratedTrace} from './generate.telemetry'\n\nexport interface TypegenGenerateTypesCommandFlags {\n  configPath?: string\n}\n\nconst generatedFileWarning = `/**\n * ---------------------------------------------------------------------------------\n * This file has been generated by Sanity TypeGen.\n * Command: \\`sanity typegen generate\\`\n *\n * Any modifications made directly to this file will be overwritten the next time\n * the TypeScript definitions are generated. Please make changes to the Sanity\n * schema definitions and/or GROQ queries if you need to update these types.\n *\n * For more information on how to use Sanity TypeGen, visit the official documentation:\n * https://www.sanity.io/docs/sanity-typegen\n * ---------------------------------------------------------------------------------\n */\\n\\n`\n\nexport default async function typegenGenerateAction(\n  args: CliCommandArguments<TypegenGenerateTypesCommandFlags>,\n  context: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n  const {output, workDir, telemetry} = context\n\n  const trace = telemetry.trace(TypesGeneratedTrace)\n  trace.start()\n\n  const codegenConfig = await readConfig(flags.configPath || 'sanity-typegen.json')\n\n  const workerPath = await getCliWorkerPath('typegenGenerate')\n\n  const spinner = output.spinner({}).start('Generating types')\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      schemaPath: codegenConfig.schema,\n      searchPath: codegenConfig.path,\n    } satisfies TypegenGenerateTypesWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  const typeFile = await open(\n    join(process.cwd(), codegenConfig.generates),\n    // eslint-disable-next-line no-bitwise\n    constants.O_TRUNC | constants.O_CREAT | constants.O_WRONLY,\n  )\n\n  typeFile.write(generatedFileWarning)\n\n  const stats = {\n    queryFilesCount: 0,\n    errors: 0,\n    queriesCount: 0,\n    schemaTypesCount: 0,\n    unknownTypeNodesGenerated: 0,\n    typeNodesGenerated: 0,\n    size: 0,\n  }\n\n  await new Promise<void>((resolve, reject) => {\n    worker.addListener('message', (msg: TypegenGenerateTypesWorkerMessage) => {\n      if (msg.type === 'error') {\n        if (msg.fatal) {\n          trace.error(msg.error)\n          reject(msg.error)\n          return\n        }\n        const errorMessage = msg.filename\n          ? `${msg.error.message} in \"${msg.filename}\"`\n          : msg.error.message\n        spinner.fail(errorMessage)\n        stats.errors++\n        return\n      }\n      if (msg.type === 'complete') {\n        resolve()\n        return\n      }\n\n      let fileTypeString = `// Source: ${msg.filename}\\n`\n\n      if (msg.type === 'schema') {\n        stats.schemaTypesCount += msg.length\n        fileTypeString += `${msg.schema}\\n\\n`\n        typeFile.write(fileTypeString)\n        return\n      }\n\n      stats.queryFilesCount++\n      for (const {\n        queryName,\n        query,\n        type,\n        typeNodesGenerated,\n        unknownTypeNodesGenerated,\n      } of msg.types) {\n        fileTypeString += `// Variable: ${queryName}\\n`\n        fileTypeString += `// Query: ${query.replace(/(\\r\\n|\\n|\\r)/gm, '')}\\n`\n        fileTypeString += `${type}\\n`\n        stats.queriesCount++\n        stats.typeNodesGenerated += typeNodesGenerated\n        stats.unknownTypeNodesGenerated += unknownTypeNodesGenerated\n      }\n      typeFile.write(`${fileTypeString}\\n`)\n      stats.size += Buffer.byteLength(fileTypeString)\n    })\n    worker.addListener('error', reject)\n  })\n\n  typeFile.close()\n\n  trace.log({\n    outputSize: stats.size,\n    queriesCount: stats.queriesCount,\n    schemaTypesCount: stats.schemaTypesCount,\n    queryFilesCount: stats.queryFilesCount,\n    filesWithErrors: stats.errors,\n    typeNodesGenerated: stats.typeNodesGenerated,\n    unknownTypeNodesGenerated: stats.unknownTypeNodesGenerated,\n    unknownTypeNodesRatio: stats.unknownTypeNodesGenerated / stats.typeNodesGenerated,\n  })\n\n  trace.complete()\n  if (stats.errors > 0) {\n    spinner.warn(`Encountered errors in ${stats.errors} files while generating types`)\n  }\n\n  spinner.succeed(\n    `Generated TypeScript types for ${stats.schemaTypesCount} schema types and ${stats.queriesCount} GROQ queries in ${stats.queryFilesCount} files into: ${codegenConfig.generates}`,\n  )\n}\n"],"names":["defineTrace","telemetry","readConfig","getCliWorkerPath","Worker","open","join","constants"],"mappings":"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"}