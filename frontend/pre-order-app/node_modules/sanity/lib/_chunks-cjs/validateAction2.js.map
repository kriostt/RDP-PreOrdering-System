{"version":3,"file":"validateAction2.js","sources":["../../src/_internal/cli/actions/validation/reporters/jsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/ndjsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/util.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/formatDocumentValidation.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/prettyReporter.ts","../../src/_internal/cli/actions/validation/reporters/index.ts","../../src/_internal/cli/actions/validation/validateDocuments.ts","../../src/_internal/cli/actions/validation/validateAction.ts"],"sourcesContent":["import {type BuiltInValidationReporter} from '../validateAction'\n\n// TODO: replace with Array.fromAsync when it's out of stage3\nasync function arrayFromAsync<T>(iterable: AsyncIterable<T>) {\n  const results: T[] = []\n  for await (const item of iterable) results.push(item)\n  return results\n}\n\nexport const json: BuiltInValidationReporter = async ({output, worker}) => {\n  const results = await arrayFromAsync(worker.stream.validation())\n  const formatted = results\n    // report out only documents with some markers\n    .filter(({markers}) => markers.length)\n    // remove validatedCount from the results\n    .map(({validatedCount, ...result}) => result)\n\n  await worker.dispose()\n\n  output.print(JSON.stringify(formatted))\n\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  for (const {level} of formatted) {\n    if (level === 'error') overallLevel = 'error'\n    if (level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n  }\n\n  return overallLevel\n}\n","import {type BuiltInValidationReporter} from '../validateAction'\n\nexport const ndjson: BuiltInValidationReporter = async ({output, worker}) => {\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  for await (const {validatedCount, ...result} of worker.stream.validation()) {\n    if (result.level === 'error') overallLevel = 'error'\n    if (result.level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    if (result.markers.length) {\n      output.print(JSON.stringify(result))\n    }\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import {type ValidationMarker} from '@sanity/types'\nimport logSymbols from 'log-symbols'\nimport {isatty} from 'tty'\n\nexport type Level = ValidationMarker['level']\n\nexport interface DocumentValidationResult {\n  revision: string\n  documentId: string\n  documentType: string\n  intentUrl?: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nexport const isTty = isatty(1)\nexport const levelValues = {error: 0, warning: 1, info: 2} as const\n\n/**\n * Generates a formatted string that includes a numerical amount and a subject\n * in plural or singular form. Note: the subject must end in `s`\n */\nexport const count = (amount: number, subject: string): string =>\n  `${amount.toLocaleString('en-US')} ${\n    amount === 1 ? subject.substring(0, subject.length - 1) : subject\n  }`\n\nconst percentageFormatter = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n})\n\n/**\n * Given a decimal, this will return that number formatted as a percentage\n */\nexport const percent = (value: number): string => percentageFormatter.format(Math.min(value, 1))\n\nconst secondFormatter = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n})\n\n/**\n * Given a start time in milliseconds, this will output the time elapsed\n * formatted in seconds\n */\nexport const seconds = (startTime: number): string => {\n  const endTime = Date.now()\n  return `(${secondFormatter.format((endTime - startTime) / 1000)}s)`\n}\n\ninterface ValidationTotals {\n  valid: {documents: number}\n  errors: {documents: number; markers: number}\n  warnings: {documents: number; markers: number}\n  infos: {documents: number; markers: number}\n}\n\n/**\n * Outputs summary text given an object of totals. Omits totals depending on the\n * desired validation `level`\n */\nexport const summary = (\n  {errors, infos, valid, warnings}: ValidationTotals,\n  level: Level = 'warning',\n): string => {\n  const levelValue = levelValues[level]\n\n  return [\n    `${logSymbols.success} Valid:    ${count(valid.documents, 'documents')}`,\n    `${logSymbols.error} Errors:   ${count(errors.documents, 'documents')}, ${count(\n      errors.markers,\n      'errors',\n    )}`,\n    levelValue >= levelValues.warning &&\n      `${logSymbols.warning} Warnings: ${count(warnings.documents, 'documents')}, ${count(\n        warnings.markers,\n        'warnings',\n      )}`,\n    levelValue >= levelValues.info &&\n      `${logSymbols.info} Info:     ${count(infos.documents, 'documents')}, ${count(\n        infos.documents,\n        'markers',\n      )}`,\n  ]\n    .filter(Boolean)\n    .join('\\n')\n}\n","import {type Path, type ValidationMarker} from '@sanity/types'\nimport chalk from 'chalk'\nimport logSymbols from 'log-symbols'\n\nimport {convertToTree, formatTree, maxKeyLength, type Tree} from '../../../../util/tree'\nimport {type DocumentValidationResult, isTty, type Level, levelValues} from './util'\n\nexport interface FormatDocumentValidationOptions extends DocumentValidationResult {\n  studioHost?: string\n  basePath?: string\n}\n\ninterface Marker extends Pick<ValidationMarker, 'level' | 'message'> {\n  path: Path\n}\n\ntype ValidationTree = Tree<Marker>\n\nconst levelHeaders = {\n  error: isTty ? chalk.bold(chalk.bgRed(chalk.black(' ERROR '))) : chalk.red('[ERROR]'),\n  warning: isTty ? chalk.bold(chalk.bgYellow(chalk.black(' WARN '))) : chalk.yellow('[WARN]'),\n  info: isTty ? chalk.bold(chalk.cyan(chalk.black(' INFO '))) : chalk.cyan('[INFO]'),\n}\n/**\n * Creates a terminal hyperlink. Only outputs a hyperlink if the output is\n * determined to be a TTY\n */\nconst link = (text: string, url: string) =>\n  isTty ? `\\u001b]8;;${url}\\u0007${text}\\u001b]8;;\\u0007` : chalk.underline(text)\n\n/**\n * For sorting markers\n */\nconst compareLevels = <T extends {level: Level; message: string}>(a: T, b: T) =>\n  levelValues[a.level] - levelValues[b.level]\n\n/**\n * Formats the markers at the root of the validation tree\n */\nconst formatRootErrors = (root: ValidationTree, hasChildren: boolean, paddingLength: number) => {\n  if (!root.nodes) return ''\n\n  const [first, ...rest] = root.nodes.slice().sort(compareLevels)\n  if (!first) return ''\n\n  const firstElbow = hasChildren ? '│ ' : '└─'\n  const firstPadding = '.'.repeat(paddingLength - 6)\n  const firstLine = `${firstElbow} (root) ${firstPadding} ${logSymbols[first.level]} ${\n    first.message\n  }`\n  const subsequentPadding = ' '.repeat(paddingLength + 2)\n  const subsequentElbow = hasChildren ? '│ ' : '  '\n\n  const restOfLines = rest\n    .map(\n      (marker) =>\n        `${subsequentElbow}${subsequentPadding} ${logSymbols[marker.level]} ${marker.message}`,\n    )\n    .join('\\n')\n  return [firstLine, restOfLines].filter(Boolean).join('\\n')\n}\n\n/**\n * Formats document validation results into a user-friendly tree structure\n */\nexport function formatDocumentValidation({\n  documentId,\n  documentType,\n  level,\n  markers,\n  intentUrl,\n}: FormatDocumentValidationOptions): string {\n  const tree = convertToTree<Marker>(markers)\n\n  const documentTypeHeader = isTty\n    ? chalk.bgWhite(chalk.black(` ${documentType} `))\n    : `[${documentType}]`\n\n  const header = `${levelHeaders[level]} ${documentTypeHeader} ${\n    intentUrl ? link(documentId, intentUrl) : chalk.underline(documentId)\n  }`\n\n  const paddingLength = Math.max(maxKeyLength(tree.children) + 2, 30)\n\n  const childErrors = formatTree<Marker>({\n    node: tree.children,\n    paddingLength,\n    getNodes: ({nodes}) => (nodes ?? []).slice().sort(compareLevels),\n    getMessage: (marker) => [logSymbols[marker.level], marker.message].join(' '),\n  })\n\n  const rootErrors = formatRootErrors(tree, childErrors.length > 0, paddingLength)\n\n  return [header, rootErrors, childErrors].filter(Boolean).join('\\n')\n}\n","import {type BuiltInValidationReporter} from '../../validateAction'\nimport {formatDocumentValidation} from './formatDocumentValidation'\nimport {\n  count,\n  type DocumentValidationResult,\n  type Level,\n  levelValues,\n  percent,\n  seconds,\n  summary,\n} from './util'\n\n/**\n * Represents the default stylish/pretty reporter\n */\n// eslint-disable-next-line max-statements\nexport const pretty: BuiltInValidationReporter = async ({output, worker, flags}) => {\n  const workspaceLoadStart = Date.now()\n  // Report workspace loaded\n  const spinner = output\n    .spinner(flags.workspace ? `Loading workspace '${flags.workspace}'…` : 'Loading workspace…')\n    .start()\n\n  const workspace = await worker.event.loadedWorkspace()\n  spinner.succeed(\n    `Loaded workspace '${workspace.name}' using project '${workspace.projectId}' and dataset '${\n      flags.dataset || workspace.dataset\n    }' ${seconds(workspaceLoadStart)}`,\n  )\n\n  if (!flags.file) {\n    // Report document count\n    spinner.start('Calculating documents to be validated…')\n    const {documentCount} = await worker.event.loadedDocumentCount()\n\n    // Report export progress\n    const downloadStart = Date.now()\n    spinner.text = `Downloading ${count(documentCount, 'documents')}…`\n    for await (const {downloadedCount} of worker.stream.exportProgress()) {\n      const percentage = percent(downloadedCount / documentCount)\n      spinner.text = `Downloading ${count(documentCount, 'documents')}… ${percentage}`\n    }\n    spinner.succeed(`Downloaded ${count(documentCount, 'documents')} ${seconds(downloadStart)}`)\n  }\n\n  const {totalDocumentsToValidate} = await worker.event.exportFinished()\n\n  const referenceIntegrityStart = Date.now()\n  spinner.start(`Checking reference existence…`)\n  await worker.event.loadedReferenceIntegrity()\n  spinner.succeed(`Checked all references ${seconds(referenceIntegrityStart)}`)\n\n  // Report validation progress\n  const validationStart = Date.now()\n  spinner.start(`Validating ${count(totalDocumentsToValidate, 'documents')}…`)\n\n  const results: DocumentValidationResult[] = []\n\n  const totals = {\n    valid: {documents: 0},\n    errors: {documents: 0, markers: 0},\n    warnings: {documents: 0, markers: 0},\n    infos: {documents: 0, markers: 0},\n  }\n\n  for await (const {validatedCount, ...result} of worker.stream.validation()) {\n    const {markers} = result\n\n    if (markers.length) {\n      results.push(result)\n    }\n\n    const errors = markers.filter((marker) => marker.level === 'error')\n    const warnings = markers.filter((marker) => marker.level === 'warning')\n    const infos = markers.filter((marker) => marker.level === 'info')\n\n    if (!markers.length) {\n      totals.valid.documents += 1\n    }\n\n    if (errors.length) {\n      totals.errors.documents += 1\n      totals.errors.markers += errors.length\n    }\n\n    if (warnings.length) {\n      totals.warnings.documents += 1\n      totals.warnings.markers += warnings.length\n    }\n\n    if (infos.length) {\n      totals.infos.documents += 1\n      totals.infos.markers += infos.length\n    }\n\n    spinner.text =\n      `Validating ${count(totalDocumentsToValidate, 'documents')}…\\n\\n` +\n      `Processed ${count(validatedCount, 'documents')} (${percent(\n        validatedCount / totalDocumentsToValidate,\n      )}):\\n${summary(totals, flags.level)}`\n  }\n\n  spinner.succeed(\n    `Validated ${count(totalDocumentsToValidate, 'documents')} ${seconds(validationStart)}`,\n  )\n  output.print(`\\nValidation results:\\n${summary(totals, flags.level)}`)\n\n  results.sort((a, b) => {\n    if (a.level === b.level) return a.documentType.localeCompare(b.documentType)\n    return levelValues[a.level] - levelValues[b.level]\n  })\n\n  let overallLevel: Level = 'info'\n\n  for (const result of results) {\n    if (result.level === 'error') overallLevel = 'error'\n    if (result.level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    output.print(`${formatDocumentValidation(result)}\\n`)\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import {json} from './jsonReporter'\nimport {ndjson} from './ndjsonReporter'\nimport {pretty} from './prettyReporter'\n\nexport const reporters = {pretty, ndjson, json}\n","import {type ClientConfig} from '@sanity/client'\nimport {type ValidationMarker} from '@sanity/types'\nimport path from 'path'\nimport readPkgUp from 'read-pkg-up'\nimport {Worker} from 'worker_threads'\n\nimport {\n  type ValidateDocumentsWorkerData,\n  type ValidationWorkerChannel,\n} from '../../threads/validateDocuments'\nimport {createReceiver, type WorkerChannelReceiver} from '../../util/workerChannels'\n\nconst DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY = 5\n\nexport interface ValidateDocumentsOptions<TReturn = unknown> {\n  level?: 'error' | 'warning' | 'info'\n  workspace?: string\n  workDir?: string\n  configPath?: string\n  clientConfig?: Partial<ClientConfig>\n  projectId?: string // override\n  dataset?: string // override\n  ndjsonFilePath?: string\n  maxCustomValidationConcurrency?: number\n  reporter?: (worker: WorkerChannelReceiver<ValidationWorkerChannel>) => TReturn\n}\n\nexport interface DocumentValidationResult {\n  documentId: string\n  documentType: string\n  revision: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nconst defaultReporter = ({stream, dispose}: WorkerChannelReceiver<ValidationWorkerChannel>) => {\n  async function* createValidationGenerator() {\n    for await (const {documentId, documentType, markers, revision, level} of stream.validation()) {\n      const result: DocumentValidationResult = {\n        documentId,\n        documentType,\n        revision,\n        level,\n        markers,\n      }\n\n      yield result\n    }\n\n    await dispose()\n  }\n\n  return createValidationGenerator()\n}\n\nexport function validateDocuments<TReturn>(\n  options: ValidateDocumentsOptions<TReturn> &\n    Required<Pick<ValidateDocumentsOptions<TReturn>, 'reporter'>>,\n): TReturn\nexport function validateDocuments(\n  options: ValidateDocumentsOptions,\n): AsyncIterable<DocumentValidationResult>\nexport function validateDocuments(options: ValidateDocumentsOptions): unknown {\n  const {\n    workspace,\n    clientConfig,\n    configPath,\n    dataset,\n    projectId,\n    workDir = process.cwd(),\n    reporter = defaultReporter,\n    level,\n    maxCustomValidationConcurrency,\n    ndjsonFilePath,\n  } = options\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = path.join(\n    path.dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'validateDocuments.js',\n  )\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      // removes props in the config that make this object fail to serialize\n      clientConfig: JSON.parse(JSON.stringify(clientConfig)),\n      configPath,\n      workspace,\n      dataset,\n      projectId,\n      level,\n      ndjsonFilePath,\n      maxCustomValidationConcurrency:\n        maxCustomValidationConcurrency ?? DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY,\n    } satisfies ValidateDocumentsWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  return reporter(createReceiver<ValidationWorkerChannel>(worker))\n}\n","import {type CliCommandArguments, type CliCommandContext, type CliOutputter} from '@sanity/cli'\nimport {type ClientConfig} from '@sanity/client'\nimport chalk from 'chalk'\nimport fs from 'fs'\nimport logSymbols from 'log-symbols'\nimport path from 'path'\n\nimport {type ValidationWorkerChannel} from '../../threads/validateDocuments'\nimport {type WorkerChannelReceiver} from '../../util/workerChannels'\nimport {reporters} from './reporters'\nimport {validateDocuments} from './validateDocuments'\n\ninterface ValidateFlags {\n  workspace?: string\n  format?: string\n  dataset?: string\n  file?: string\n  level?: 'error' | 'warning' | 'info'\n  'max-custom-validation-concurrency'?: number\n  yes?: boolean\n  y?: boolean\n}\n\nexport type BuiltInValidationReporter = (options: {\n  output: CliOutputter\n  worker: WorkerChannelReceiver<ValidationWorkerChannel>\n  flags: ValidateFlags\n}) => Promise<'error' | 'warning' | 'info'>\n\nexport default async function validateAction(\n  args: CliCommandArguments<ValidateFlags>,\n  {apiClient, workDir, output, prompt}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n  const unattendedMode = Boolean(flags.yes || flags.y)\n\n  if (!unattendedMode) {\n    output.print(\n      `${chalk.yellow(`${logSymbols.warning} Warning:`)} This command ${\n        flags.file\n          ? 'reads all documents from your input file'\n          : 'downloads all documents from your dataset'\n      } and processes them through your local schema within a ` +\n        `simulated browser environment.\\n`,\n    )\n    output.print(`Potential pitfalls:\\n`)\n    output.print(\n      `- Processes all documents locally (excluding assets). Large datasets may require more resources.`,\n    )\n    output.print(\n      `- Executes all custom validation functions. Some functions may need to be refactored for compatibility.`,\n    )\n    output.print(\n      `- Not all standard browser features are available and may cause issues while loading your Studio.`,\n    )\n    output.print(\n      `- Adheres to document permissions. Ensure this account can see all desired documents.`,\n    )\n    if (flags.file) {\n      output.print(\n        `- Checks for missing document references against the live dataset if not found in your file.`,\n      )\n    }\n\n    const confirmed = await prompt.single<boolean>({\n      type: 'confirm',\n      message: `Are you sure you want to continue?`,\n      default: true,\n    })\n\n    if (!confirmed) {\n      output.print('User aborted')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (flags.format && !(flags.format in reporters)) {\n    const formatter = new Intl.ListFormat('en-US', {\n      style: 'long',\n      type: 'conjunction',\n    })\n    throw new Error(\n      `Did not recognize format '${flags.format}'. Available formats are ${formatter.format(\n        Object.keys(reporters).map((key) => `'${key}'`),\n      )}`,\n    )\n  }\n\n  const level = flags.level || 'warning'\n\n  if (level !== 'error' && level !== 'warning' && level !== 'info') {\n    throw new Error(`Invalid level. Available levels are 'error', 'warning', and 'info'.`)\n  }\n\n  const maxCustomValidationConcurrency = flags['max-custom-validation-concurrency']\n  if (\n    maxCustomValidationConcurrency &&\n    typeof maxCustomValidationConcurrency !== 'number' &&\n    !Number.isInteger(maxCustomValidationConcurrency)\n  ) {\n    throw new Error(`'--max-custom-validation-concurrency' must be an integer.`)\n  }\n\n  const clientConfig: Partial<ClientConfig> = {\n    ...apiClient({\n      requireUser: true,\n      requireProject: false, // we'll get this from the workspace\n    }).config(),\n    // we set this explictly to true because the default client configuration\n    // from the CLI comes configured with `useProjectHostname: false` when\n    // `requireProject` is set to false\n    useProjectHostname: true,\n    // we set this explictly to true because we pass in a token via the\n    // `clientConfiguration` object and also mock a browser environment in\n    // this worker which triggers the browser warning\n    ignoreBrowserTokenWarning: true,\n  }\n\n  let ndjsonFilePath\n  if (flags.file) {\n    if (typeof flags.file !== 'string') {\n      throw new Error(`'--file' must be a string`)\n    }\n    const filePath = path.resolve(workDir, flags.file)\n\n    const stat = await fs.promises.stat(filePath)\n    if (!stat.isFile()) {\n      throw new Error(`'--file' must point to a valid ndjson file or tarball`)\n    }\n\n    ndjsonFilePath = filePath\n  }\n\n  const overallLevel = await validateDocuments({\n    workspace: flags.workspace,\n    dataset: flags.dataset,\n    clientConfig,\n    workDir,\n    level,\n    maxCustomValidationConcurrency,\n    ndjsonFilePath,\n    reporter: (worker) => {\n      const reporter =\n        flags.format && flags.format in reporters\n          ? reporters[flags.format as keyof typeof reporters]\n          : reporters.pretty\n\n      return reporter({output, worker, flags})\n    },\n  })\n\n  process.exitCode = overallLevel === 'error' ? 1 : 0\n}\n"],"names":["isatty","logSymbols","chalk","convertToTree","maxKeyLength","formatTree","readPkgUp","path","Worker","createReceiver","fs"],"mappings":"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"}